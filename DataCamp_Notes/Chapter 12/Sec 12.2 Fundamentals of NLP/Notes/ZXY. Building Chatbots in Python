Building Chatbots in Python

Course Description
When done well, interacting with a computer through human language is incredibly powerful and also quite fun. Messaging and Voice-Controlled devices are the next big platforms, and conversational computing has a big role to play in creating engaging augmented and virtual reality experiences. This course will get you started on the path towards building such applications! There are a number of unique challenges to building these kinds of programs. The most obvious one is of course - how do I turn human language into machine instructions? In this course, you'll tackle this first with rule-based systems and then with machine learning. Some chat systems are designed to be useful, while others are just good fun. You will build one of each, and finally put everything together to make a helpful, friendly chatbot! And once you complete the course, you can learn how to connect your chatbot to Facebook Messenger!

=====================================================================================================================================


1
Chatbots 101
FREE
0%
In this chapter, you'll learn how to build your first chatbot! After gaining a bit of historical context, you'll set up a basic structure for receiving text and responding to users, and then learn how to add the basic elements of personality. You'll then build rule-based systems for parsing text.


Course content
Implementing smalltalk, ELIZA style
How to use regex and ML to extract meaning from free-form text
Build chatbots that can
Query a database
Plan a trip
Help you order coffee
Handling statefulness



EchoBot I
In [1]: USER: Hello!
Out[1]: BOT: I can hear you, you said: 'Hello!'
In [2]: USER: How are you?
Out[2]: BOT: I can hear you, you said: 'How are you?'


EchoBot II
In [1]: def respond(message):
: return "I can hear you! you said: {}".format(message)
In [2]: def send_message(message):
: # calls respond() to get response
In [3]: send_message("hello!")
Out[3]: USER: hello!
...: BOT : I can hear you! you said: hello!



EchoBot III
In [1]: import time In [2]: time.sleep(0
.
5
)
-----------------------------------------------------------------------------------------------------------------------

EchoBot I
Hello, World!

You'll begin learning how to build chatbots in Python by writing two functions to build the simplest bot possible: EchoBot. EchoBot just responds by replying with the same message it receives.

In this exercise, you'll define a function that responds to a user's message. In the next exercise, you'll complete EchoBot by writing a function to send a message to the bot.

Instructions
100 XP
Write a function called respond() with a single parameter message which returns the bot's response. To do this, concatenate the strings "I can hear you! You said: " and message.
Store the concatenated strings in bot_message, and return this result.


bot_template = "BOT : {0}"
user_template = "USER : {0}"

# Define a function that responds to a user's message: respond
def respond(message):
    # Concatenate the user's message to the end of a standard bot respone
    bot_message = "I can hear you! You said: " + message
    # Return the result
    return bot_message

-----------------------------------------------------------------------------------------------------------------------

EchoBot II
Having written your respond() function, you'll now define a function called send_message() with a single parameter message which logs the message and the bot's response.

Instructions
100 XP
Use the user_template string's .format() method to include the user's message into the user template, and print the result.
Call the respond() function with the message passed in and save the result as response.
Log the bot's response using the bot_template string's .format() method.
Send the message "hello" to the bot.

# Define a function that sends a message to the bot: send_message
def send_message(message):
    # Print user_template including the user_message
    print(user_template.format(message))
    # Get the bot's response to the message
    response = respond(message)
    # Print the bot template including the bot's response.
    print(bot_template.format(response))

# Send a message to the bot
send_message("hello")


<script.py> output:
    USER : hello
    BOT : I can hear you! You said: hello


-----------------------------------------------------------------------------------------------------------------------

Creating a personality


Why personality?
Difference between a command line app and a chatbot
Makes chatbots and voice assistants more accessible and fun to use
Your users will expect it!


S
m
allt
alk
I
n
[
1
]
:
r
e
s
p
o
n
s
e
s
=
{
:
"
w
h
a
t's
y
o
u
r
n
a
m
e
?
"
:
"
m
y
n
a
m
e
i
s
E
c
h
o
B
o
t
"
,
:
"
w
h
a
t's
t
h
e
w
e
a
t
h
e
r
t
o
d
a
y
?
"
:
"
i
t's
s
u
n
n
y!"
:
}
I
n
[
2
]
:
d
e
f
r
e
s
p
o
n
d
(
m
e
s
s
a
g
e
)
:
:
i
f
m
e
s
s
a
g
e
i
n
r
e
s
p
o
n
s
e
s
:
:
r
e
t
u
r
n
r
e
s
p
o
n
s
e
s
[
m
e
s
s
a
g
e
]
I
n
[
3
]
:
r
e
s
p
o
n
d
(
"
w
h
a
t's
y
o
u
r
n
a
m
e
?
"
)
O
u
t
[
3
]
: 'm
y
n
a
m
e
i
s
E
c
h
o
B
o
t'

Including variables
In [1]: responses = {
: "what's today's weather?": "it's {} today"
: }
In [2]: weather_today = "cloudy"
In [3]: def respond(message):
: if message in responses:
: return responses[message].format(weather_today)
:
In [4]: respond("what's today's weather?")
Out[4]: "it's cloudy today"



Choosing responses
In [1]: responses = {
: "what's your name?": [
: "my name is EchoBot"
,
: "they call me EchoBot"
,
: "the name's Bot, Echo Bot"
: ]
: }
In [2]: import random
In [3]: def respond(message):
: if message in responses:
: return random.choice(responses[message])
In [4]: respond("what's your name?")
Out[4]: "the name's Bot, Echo Bot"



Asking questions
In [1]: responses = [ "tell me more!"
,
"why do you think that?" ]
In [2]: import random
In [3]: def respond(message):
: return random.choice(responses)
In [4]: respond("I think you're really great")
Out[4]: 'why do you think that?'

----------------------------------------------------------------------------------------------------------------------------

Chitchat
Now you're going to leave simple EchoBot behind and create a bot which can answer simple questions such as "What's your name?" and "What's today's weather?"

You'll use a dictionary with these questions as keys, and the correct responses as values.

This means the bot will only respond correctly if the message matches exactly, which is a big limitation. In later exercises you will create much more robust solutions.

The send_message function has already been defined for you, as well as the bot_template and user_template variables.

Instructions 1/2
100 XP
1
2
Define a respond() function which takes in a message argument, checks if the message has a pre-defined response, and returns the response in the responses dictionary if there is a match, or the "default" message otherwise.

# Define variables
name = "Greg"
weather = "cloudy"

# Define a dictionary with the predefined responses
responses = {
  "what's your name?": "my name is {0}".format(name),
  "what's today's weather?": "the weather is {0}".format(weather),
  "default": "default message"
}

# Return the matching response if there is one, default otherwise
def respond(message):
    # Check if the message is in the responses
    if message in responses:
        # Return the matching message
        bot_message = responses[message]
    else:
        # Return the "default" message
        bot_message = responses["default"]
    return bot_message
		
		
----------------------------------------------------------------------------------------------------------------------------
Adding variety
It can get a little boring hearing the same old answers over and over. In this exercise, you'll add some variation. If you ask your bot how it's feeling, it may equally well respond with "oh I'm great!" as with "I'm very sad today".

Here, you'll use the random module - specifically random.choice(ls) - which randomly selects an element from a list ls.

A dictionary called responses, which maps each message to a list of possible responses, has been defined for you.

Instructions 1/2
100 XP
1
2
Import the random module.
Use random.choice() in the respond() function to choose one of the matching responses.


# Import the random module
import random

name = "Greg"
weather = "cloudy"

# Define a dictionary containing a list of responses for each message
responses = {
  "what's your name?": [
      "my name is {0}".format(name),
      "they call me {0}".format(name),
      "I go by {0}".format(name)
   ],
  "what's today's weather?": [
      "the weather is {0}".format(weather),
      "it's {0} today".format(weather)
    ],
  "default": ["default message"]
}

# Use random.choice() to choose a matching response
def respond(message):
    # Check if the message is in the responses
    if message in responses:
        # Return a random matching response
        bot_message = random.choice(responses[message])
    else:
        # Return a random "default" response
        bot_message = random.choice(responses["default"])
    return bot_message








----------------------------------------------------------------------------------------------------------------------------


Text processing with
regular expressions

Regular expressions
Match messages against known patterns
Extract key phrases
Transform sentences grammatically



The regex behind ELIZA
USER: "do you remember when you ate strawberries in the garden?"
ELIZA: "How could I forget when I ate strawberries in the garden?"


Pattern matching
In [1]: import re
In [2]: pattern = "do you remember .*"
In [3]: message = "do you remember when you ate strawberries in the garden"
In [4]: match = re.search(pattern, message)
In [5]: if match:
: print("string matches!")
Out[5]: string matches!


Extracting key phrases
In [1]: import re
In [2]: pattern = "if (.*)"
In [3]: message = "what would happen if bots took over the world"
In [4]: match = re.search(pattern, message)
In [5]: match.group(0)
Out[5]: 'what would happen if bots took over the world'
In [6]: match.group(1)
Out[6]: 'bots took over the world'



Grammatical transformation
In [1]: import re
In [2]: def swap_pronouns(phrase):
...: if 'I' in phrase:
...: return re.sub('I'
,
'you'
, phrase)
...: if 'my' in phrase:
...: return re.sub('my'
,
'your'
, phrase)
...:
...: else:
...: return phrase
In [3]: swap_pronouns("I walk my dog")
Out[3]: 'You walk your dog'




Putting it all together
In [1]: pattern = 'do you remember (.*)'
In [2]: message = 'do you remember when you ate strawberries in the garden'
In [3]: phrase = pattern.search(pattern, message).group(1)
In [4]: phrase
Out[4]: 'when you ate strawberries in the garden'
In [5]: response = choose_response(pattern)
In [6]: response
Out[6]: 'how could I forget {}'
In [7]: phrase = swap_pronouns(phrase)
In [8]: phrase
Out[8]: 'when I ate strawberries in the garden'
In [9]: response.format(phrase)
Out[9]: 'how could I forget when I ate strawberries in the garden'




=====================================================================================================================================



2
Understanding natural language
0%
Here, you'll use machine learning to turn natural language into structured data using spaCy, scikit-learn, and rasa NLU. You'll start with a refresher on the theoretical foundations, and then move on to building models using the ATIS dataset, which contains thousands of sentences from real people interacting with a flight booking system.



=====================================================================================================================================


3
Building a virtual assistant
0%
In this chapter, you're going to build a personal assistant to help you plan a trip. It will be able to respond to questions like "are there any cheap hotels in the north of town?" by looking inside a hotels database for matching results.



=====================================================================================================================================


4
Dialogue
0%
Everything you've built so far has statelessly mapped intents to actions & responses. It's amazing how far you can get with that! But to build more sophisticated bots you will always want to add some statefulness. That's what you'll do here, as you build a chatbot that helps users order coffee. Have fun!

