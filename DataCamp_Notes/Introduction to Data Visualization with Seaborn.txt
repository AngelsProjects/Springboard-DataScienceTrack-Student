INTERACTIVE COURSE
Introduction to Data Visualization with Seaborn
Introduction to Data Visualization with Seaborn
4 hours
14 Videos
44 Exercises
3,568 Participants
3,700 XP
This course is part of these tracks:

Data Visualization with Python
Erin Case
Erin Case
Data Scientist

Erin is a Data Scientist who is passionate about both statistics and education. She enjoys experimental design, communicating data analyses to a wide range of audiences, and developing user-facing data products for technology companies. Previously, she was a biostatistician for two epidemiological studies on cardiac arrest.

COLLABORATOR(S)
Mona Khalil
Mona Khalil

Yashas Roy
Yashas Roy

PREREQUISITES
Introduction to Data Science in Python
DATASETS
Countries
Mileage per gallon
Students
Survey responses
Course Description
Seaborn is a powerful Python library that makes it easy to create informative and attractive visualizations. This course provides an introduction to Seaborn and teaches you how to visualize your data using plots such as scatter plots, box plots, and bar plots. You’ll do this while exploring survey responses about student hobbies and the factors that are associated with academic success. You’ll also learn about some of Seaborn’s advantages as a statistical visualization tool, such as how it automatically calculates confidence intervals. By the end of the course, you will be able to use Seaborn in a variety of situations to explore your data and effectively communicate the results of your data analyses to others.


<=========================================================================================================================>
1
Introduction to Seaborn
FREE
0%
What is Seaborn, and when should you use it? In this chapter, you will find out! Plus, you will learn how to create scatter plots and count plots with both lists of data and pandas DataFrames. You will also be introduced to one of the big advantages of using Seaborn - the ability to easily add a third variable to your plots by using color to represent different subgroups.


------------------------------------------------------------------------------------------------------------------------------


Making a scatter plot with lists
In this exercise, we'll use a dataset that contains information about 227 countries. This dataset has lots of interesting information on each country, such as the country's birth rates, death rates, and its gross domestic product (GDP). GDP is the value of all the goods and services produced in a year, expressed as dollars per person.

We've created three lists of data from this dataset to get you started. gdp is a list that contains the value of GDP per country, expressed as dollars per person. phones is a list of the number of mobile phones per 1,000 people in that country. Finally, percent_literate is a list that contains the percent of each country's population that can read and write.

Instructions 1/4
25 XP
1
2
3
4
Import Matplotlib and Seaborn using the standard naming convention.
Take Hint (-7 XP)

# Import Matplotlib and Seaborn
import maplotlib.pyplot as plt
import seaborn as sns


Instructions 2/4
25 XP
2
3
4
Create a scatter plot of GDP (gdp) vs. number of phones per 1000 people (phones).


# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Create scatter plot with GDP on the x-axis and number of phones on the y-axis
sns.scatterplot(x=gdp,y=phones)

Instructions 3/4
25 XP
3
4
Display the plot.


# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Create scatter plot with GDP on the x-axis and number of phones on the y-axis
sns.scatterplot(x=gdp, y=phones)

# Show plot
plt.show()


Instructions 4/4
25 XP
4
Change the scatter plot so it displays the percent of the population that can read and write (percent_literate) on the y-axis.

# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Change this scatter plot to have percent literate on the y-axis
sns.scatterplot(x=gdp, y=percent_literate)

# Show plot
plt.show()


 +100 XP
Alright! While this plot does not show a linear relationship between GDP and percent literate, countries with a lower GDP do seem more likely to have a lower percent of the population that can read and write.

--------------------------------------------------------------------------------------------------------------------------

Making a count plot with a list
In the last exercise, we explored a dataset that contains information about 227 countries. Let's do more exploration of this data - specifically, how many countries are in each region of the world?

To do this, we'll need to use a count plot. Count plots take in a categorical list and return bars that represent the number of list entries per category. You can create one here using a list of regions for each country, which is a variable named region.

Instructions
100 XP
Import Matplotlib and Seaborn using the standard naming conventions.
Use Seaborn to create a count plot with region on the y-axis.
Display the plot.


# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns


# Create count plot with region on the y-axis
sns.countplot(y=region)

# Show plot
plt.show()


 +100 XP
Great job! Sub-Saharan Africa contains the most countries in this list. We'll revisit count plots later in the course.
--------------------------------------------------------------------------------------------------------------------------

"Tidy" vs. "untidy" data
Here, we have a sample dataset from a survey of children about their favorite animals. But can we use this dataset as-is with Seaborn? Let's use Pandas to import the csv file with the data collected from the survey and determine whether it is tidy, which is essential to having it work well with Seaborn.

To get you started, the filepath to the csv file has been assigned to the variable csv_filepath.

Instructions 1/2
50 XP
1
2
Read the csv file located at csv_filepath into a DataFrame named df.
Print the head of df to show the fir

# Import Pandas
import pandas as pd

# Create a DataFrame from csv file
df = pd.read_csv(csv_filepath)

# Print the head of df
print(df.head())


--------------------------------------------------------------------------------------------------------------------------

Making a count plot with a DataFrame
In this exercise, we'll look at the responses to a survey sent out to young people. Our primary question here is: how many young people surveyed report being scared of spiders? Survey participants were asked to agree or disagree with the statement "I am afraid of spiders". Responses vary from 1 to 5, where 1 is "Strongly disagree" and 5 is "Strongly agree".

The survey data is in a csv file located at csv_filepath.

Instructions
100 XP
Import Matplotlib, Pandas, and Seaborn using the standard names.
Create a DataFrame named df from the csv file located at csv_filepath.
Create a count plot with the "Spiders" column values on the x-axis.
Display the plot.

# Import Matplotlib, Pandas, and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd



# Create a DataFrame from csv file
df = pd.read_csv(csv_filepath) 

# Create a count plot with "Spiders" on the x-axis
sns.countplot(data=df,x="Spiders")

# Display the plot
plt.show()

--------------------------------------------------------------------------------------------------------------------------

Hue and scatter plots
In the prior video, we learned how hue allows us to easily make subgroups within Seaborn plots. Let's try it out by exploring data from students in secondary school. We have a lot of information about each student like their age, where they live, their study habits and their extracurricular activities.

For now, we'll look at the relationship between the number of absences they have in school and their final grade in the course, segmented by where the student lives (rural vs. urban area).

Instructions 1/2
50 XP
1
2
Create a scatter plot with "absences" on the x-axis and final grade ("G3") on the y-axis using the DataFrame student_data. Color the plot points based on "location" (urban vs. rural).

# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Create a scatter plot of absences vs. final grade
sns.scatterplot(x='absences',
y='G3',
data=student_data,
hue='location')



# Show plot
plt.show()

Instructions 2/2
50 XP
2
Make "Rural" appear before "Urban" in the plot legend.

# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Change the legend order in the scatter plot
sns.scatterplot(x="absences", y="G3", 
                data=student_data, 
                hue="location")

# Show plot
plt.show()

------------------------------------------------------------------------------------------------------------------------------------

Hue and count plots
Let's continue exploring our dataset from students in secondary school by looking at a new variable. The "school" column indicates the initials of which school the student attended - either "GP" or "MS".

In the last exercise, we created a scatter plot where the plot points were colored based on whether the student lived in an urban or rural area. How many students live in urban vs. rural areas, and does this vary based on what school the student attends? Let's make a count plot with subgroups to find out.

Instructions
100 XP
Fill in the palette_colors dictionary to map the "Rural" location value to the color "green" and the "Urban" location value to the color "blue".
Create a count plot with "school" on the x-axis using the student_data DataFrame.
Add subgroups to the plot using "location" variable.
Use the palette_colors dictionary to make the location subgroups green and blue.

# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Create a dictionary mapping subgroup values to colors
palette_colors = {'Rural': "green", 'Urban': "blue"}

# Create a count plot of school with location subgroups
sns.countplot(x='school',
data=student_data,
hue='location',
palette = palette_colors)




# Display plot
plt.show()


+70 XP
Awesome. Students at GP tend to come from an urban location, but students at MS are more evenly split. Congratulations on finishing Chapter 1!


<=========================================================================================================================>
VIEW CHAPTER DETAILS
2
Visualizing Two Quantitative Variables
0%
In this chapter, you will create and customize plots that visualize the relationship between two quantitative variables. To do this, you will use scatter plots and line plots to explore how the level of air pollution in a city changes over the course of a day and how horsepower relates to fuel efficiency in cars. You will also see another big advantage of using Seaborn - the ability to easily create subplots in a single figure!


------------------------------------------------------------------------------------------------------------------------------------

Creating subplots with col and row
We've seen in prior exercises that students with more absences ("absences") tend to have lower final grades ("G3"). Does this relationship hold regardless of how much time students study each week?

To answer this, we'll look at the relationship between the number of absences that a student has in school and their final grade in the course, creating separate subplots based on each student's weekly study time ("study_time").

Seaborn has been imported as sns and matplotlib.pyplot has been imported as plt.

Instructions 1/3
50 XP
Instructions 1/3
50 XP
1
Modify the code to use relplot() instead of scatterplot().

Take Hint (-15 XP)
2
Modify the code to create one scatter plot for each level of the variable "study_time", arranged in columns.

3
Adapt your code to create one scatter plot for each level of a student's weekly study time, this time arranged in rows.


# Change to use relplot() instead of scatterplot()
sns.relplot(x="absences", y="G3", 
                data=student_data,
                kind='scatter')

# Show plot
plt.show()




# Change to make subplots based on study time
sns.relplot(x="absences", y="G3", 
            data=student_data,
            kind="scatter",
            col = 'study_time')

# Show plot
plt.show()



# Change this scatter plot to arrange the plots in rows instead of columns
sns.relplot(x="absences", y="G3", 
            data=student_data,
            kind="scatter", 
            row="study_time")

# Show plot
plt.show()

 +100 XP
Great job! Because these subplots had a large range of x values, it's easier to read them arranged in rows instead of columns.

-------------------------------------------------------------------------------------------------------------

Creating two-factor subplots
Let's continue looking at the student_data dataset of students in secondary school. Here, we want to answer the following question: does a student's first semester grade ("G1") tend to correlate with their final grade ("G3")?

There are many aspects of a student's life that could result in a higher or lower final grade in the class. For example, some students receive extra educational support from their school ("schoolsup") or from their family ("famsup"), which could result in higher grades. Let's try to control for these two factors by creating subplots based on whether the student received extra educational support from their school or family.

Seaborn has been imported as sns and matplotlib.pyplot has been imported as plt.

Instructions 1/3
35 XP
1
2
3
Instructions 1/3
35 XP
1
2
3
Use relplot() to create a scatter plot with "G1" on the x-axis and "G3" on the y-axis, using the student_data DataFrame.


# Create a scatter plot of G1 vs. G3
sns.relplot(data=student_data, x = 'G1', y = 'G3', kind='scatter')



# Show plot
plt.show()



Instructions 2/3
35 XP
2
3
Create column subplots based on whether the student received support from the school ("schoolsup"), ordered so that "yes" comes before "no".


# Adjust to add subplots based on school support
sns.relplot(x="G1", y="G3", 
            data=student_data,
            kind="scatter",
            col='schoolsup',
            col_order=['yes','no'])

# Show plot
plt.show()


Add row subplots based on whether the student received support from the family ("famsup"), ordered so that "yes" comes before "no". This will result in subplots based on two factors.


# Adjust further to add subplots based on family support
sns.relplot(x="G1", y="G3", 
            data=student_data,
            kind="scatter", 
            row = 'famsup',
            row_order = ['yes','no'],
            col="schoolsup",
            col_order=["yes", "no"])

# Show plot
plt.show()


---------------------------------------------------------------------------------------------------------------------------













<=========================================================================================================================>
VIEW CHAPTER DETAILS
3
Visualizing a Categorical and a Quantitative Variable
0%
Categorical variables are present in nearly every dataset, but they are especially prominent in survey data. In this chapter, you will learn how to create and customize categorical plots such as box plots, bar plots, count plots, and point plots. Along the way, you will explore survey data from young people about their interests, students about their study habits, and adult men about their feelings about masculinity.






<=========================================================================================================================>
VIEW CHAPTER DETAILS
4
Customizing Seaborn Plots
0%
In this final chapter, you will learn how to add informative plot titles and axis labels, which are one of the most important parts of any data visualization! You will also learn how to customize the style of your visualizations in order to more quickly orient your audience to the key takeaways. Then, you will put everything you have learned together for the final exercises of the course!

VIEW CHAPTER DETAILS
