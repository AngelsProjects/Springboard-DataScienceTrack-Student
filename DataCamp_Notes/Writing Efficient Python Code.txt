Course Description
As a Data Scientist, the majority of your time should be spent gleaning actionable insights from data -- not waiting for your code to finish running. Writing efficient Python code can help reduce runtime and save computational resources, ultimately freeing you up to do the things you love as a Data Scientist. In this course, you'll learn how to use Python's built-in data structures, functions, and modules to write cleaner, faster, and more efficient code. We'll explore how to time and profile code in order to find bottlenecks. Then, you'll practice eliminating these bottlenecks, and other bad design patterns, using Python's Standard Library, NumPy, and pandas. After completing this course, you'll have the necessary tools to start writing efficient Python code!

==================================================================================================================================


1
Foundations for efficiencies
FREE
0%
In this chapter, you'll learn what it means to write efficient Python code. You'll explore Python's Standard Library, learn about NumPy arrays, and practice using some of Python's built-in tools. This chapter builds a foundation for the concepts covered ahead.



__________________________________________________________________________________________________________________________________

Pop quiz: what is efficient
In the context of this course, what is meant by efficient Python code?

Code that executes quickly for the task at hand, minimizes the memory footprint and follows Python's coding style principles.



_________________________________________________________________________________________________________________________________

A taste of things to come
In this exercise, you'll explore both the Non-Pythonic and Pythonic ways of looping over a list.

names = ['Jerry', 'Kramer', 'Elaine', 'George', 'Newman']
Suppose you wanted to collect the names in the above list that have six letters or more. In other programming languages, the typical approach is to create an index variable (i), use i to iterate over the list, and use an if statement to collect the names with six letters or more:

i = 0
new_list= []
while i < len(names):
    if len(names[i]) >= 6:
        new_list.append(names[i])
    i += 1
Let's explore some more Pythonic ways of doing this.

Instructions 1/3
50 XP
1
Print the list, new_list, that was created using a Non-Pythonic approach.

# Print the list created using the Non-Pythonic approach
i = 0
new_list= []
while i < len(names):
    if len(names[i]) >= 6:
        new_list.append(names[i])
    i += 1
print(new_list)


A more Pythonic approach would loop over the contents of names, rather than using an index variable. Print better_list.

# Print the list created by looping over the contents of names
better_list = []
for name in names:
    if len(name) >= 6:
        better_list.append(name)
print(better_list)


# Print the list created by using list comprehension
best_list = [name for name in names if len(name) >= 6]
print(best_list)

The best Pythonic way of doing this is by using list comprehension. Print best_list

Great work! Don't get too caught up in the coding concepts just yet (you'll practice using lists, for loops, and list comprehensions later on). The important thing to notice here is that following some of Python's guiding principles allows you to write cleaner and more efficient code. 

Remember, Pythonic code == efficient code. You'll explore these, and other, Pythonic concepts later on in the course, but for now, this is just a taste of things to come!
_________________________________________________________________________________________________________________________________

The best Pythonic way of doing this is by using list comprehension. Print best_list

Zen of Python
In the video, we covered the Zen of Python written by Tim Peters, which lists 19 idioms that serve as guiding principles for any Pythonista. Python has hundreds of Python Enhancement Proposals, commonly referred to as PEPs. The Zen of Python is one of these PEPs and is documented as PEP20.

One little Easter Egg in Python is the ability to print the Zen of Python using the command import this. Let's take a look at one of the idioms listed in these guiding principles.

Type and run the command import this within your IPython console and answer the following question:

What is the 7th idiom of the Zen of Python?



_________________________________________________________________________________________________________________________________

# Create a range object that goes from 0 to 5
nums = range(0,6)
print(type(nums))

# Convert nums to a list
nums_list = list(nums)
print(nums_list)

# Create a new list of odd numbers from 1 to 11 by unpacking a range object
nums_list2 = [*range(1,12,2)]
print(nums_list2)

<script.py> output:
    <class 'range'>
    [0, 1, 2, 3, 4, 5]
    [1, 3, 5, 7, 9, 11]
    
    

 +100 XP
Nicely done! Notice that using Python's range() function allows you to create a range object of numbers without explicitly typing them out. You can convert the range object into a list by using the list() function or by unpacking it into a list using the star character (*). Cool!

_________________________________________________________________________________________________________________________________

Built-in practice: enumerate()
In this exercise, you'll practice using Python's built-in function enumerate(). This function is useful for obtaining an indexed list. For example, suppose you had a list of people that arrived at a party you are hosting. The list is ordered by arrival (Jerry was the first to arrive, followed by Kramer, etc.):

names = ['Jerry', 'Kramer', 'Elaine', 'George', 'Newman']
If you wanted to attach an index representing a person's arrival order, you could use the following for loop:

indexed_names = []
for i in range(len(names)):
    index_name = (i, names[i])
    indexed_names.append(index_name)

[(0,'Jerry'),(1,'Kramer'),(2,'Elaine'),(3,'George'),(4,'Newman')]
But, that's not the most efficient solution. Let's explore how to use enumerate() to make this more efficient.

Instructions
100 XP
Instructions
100 XP
Instead of using for i in range(len(names)), update the for loop to use i as the index variable and name as the iterator variable and use enumerate().
Rewrite the previous for loop using enumerate() and list comprehension to create a new list, indexed_names_comp.
Create another list (indexed_names_unpack) by using the star character (*) to unpack the enumerate object created from using enumerate() on names. This time, start the index for enumerate() at one instead of zero.

# Rewrite the for loop to use enumerate
indexed_names = []
for i,name in enumerate(names):
    index_name = (i,name)
    indexed_names.append(index_name) 
print(indexed_names)

# Rewrite the above for loop using list comprehension
indexed_names_comp = [(i,name) for i,name in enumerate(names)]
print(indexed_names_comp)

# Unpack an enumerate object with a starting index of one
indexed_names_unpack = [*enumerate(names, 1)]
print(indexed_names_unpack)

<script.py> output:
    [(0, 'Jerry'), (1, 'Kramer'), (2, 'Elaine'), (3, 'George'), (4, 'Newman')]
    [(0, 'Jerry'), (1, 'Kramer'), (2, 'Elaine'), (3, 'George'), (4, 'Newman')]
    [(1, 'Jerry'), (2, 'Kramer'), (3, 'Elaine'), (4, 'George'), (5, 'Newman')]

 +100 XP
Awesome! Using Python's built-in enumerate() function allows you to create an index for each item in the object you give it. You can use list comprehension, or even unpack the enumerate object directly into a list, to write a nice simple one-liner.

_________________________________________________________________________________________________________________________________


Built-in practice: map()
In this exercise, you'll practice using Python's built-in map() function to apply a function to every element of an object. Let's look at a list of party guests:

names = ['Jerry', 'Kramer', 'Elaine', 'George', 'Newman']
Suppose you wanted to create a new list (called names_uppercase) that converted all the letters in each name to uppercase. you could accomplish this with the below for loop:

names_uppercase = []

for name in names:
  names_uppercase.append(name.upper())

['JERRY', 'KRAMER', 'ELAINE', 'GEORGE', 'NEWMAN']
Let's explore using the map() function to do this more efficiently in one line of code.

Instructions
100 XP
Instructions
100 XP
Use map() and the method str.upper() to convert each name in the list names to uppercase. Save this to the variable names_map.
Print the data type of names_map.
Unpack the contents of names_map into a list called names_uppercase using the star character (*).
Print names_uppercase and observe its contents.


Hint
To apply a function (func()) to each element of names, you can use the command map(func, names). Note that the func argument should not contain closing parentheses.
You can print the data type of names_map by placing it within the type() function.

# Use map to apply str.upper to each element in names
names_map  = map(str.upper, names)

# Print the type of the names_map
print(type(names_map))

# Unpack names_map into a list
names_uppercase = [*names_map]

# Print the list created above
print(names_uppercase)

 +0 XP
Well done! You used Python's built-in map() function to apply the str.upper() method to each element in the names object. Later on in the course, you'll explore how using map() can provide some efficiency improvements to your code.


<script.py> output:
    <class 'map'>
    ['JERRY', 'KRAMER', 'ELAINE', 'GEORGE', 'NEWMAN']
    
    
    _________________________________________________________________________________________________________________________________
    
    
    Practice with NumPy arrays
Let's practice slicing numpy arrays and using NumPy's broadcasting concept. Remember, broadcasting refers to a numpy array's ability to vectorize operations, so they are performed on all elements of an object at once.

A two-dimensional numpy array has been loaded into your session (called nums) and printed into the console for your convenience. numpy has been imported into your session as np.

Instructions 1/2
50 XP
Print the second row of nums.
Print the items of nums that are greater than six.
Create nums_dbl that doubles each number in nums.
Replace the third column in nums with a new column that adds 1 to each item in the original column.


 Question
When compared to a list object, what are two advantages of using a numpy array?

Possible Answers
A numpy array is the only data structure that can be used with the numpy package and often has less verbose indexing syntax.
A numpy array contains homogeneous data types (which reduces memory consumption) and provides the ability to apply operations on all elements through broadcasting.
A numpy array supports boolean indexing and has much better one-dimensional indexing capabilities.
Both a list object and a numpy array are identical.


# Print second row of nums
print(nums[1,:])

# Print all elements of nums that are greater than six
print(nums[nums > 6])

# Double every element of nums
nums_dbl = nums * 2
print(nums_dbl)

# Replace the third column of nums
nums[:,2] = nums[:,2] + 1
print(nums)


[[ 1  2  3  4  5]
 [ 6  7  8  9 10]]
[[ 1  2  3  4  5]
 [ 6  7  8  9 10]]
[[ 1  2  3  4  5]
 [ 6  7  8  9 10]]


   +100 XP
Well done! You're slicing numpy arrays like a pro and learning how to take advantage of NumPy's broadcasting concept. Using numpy arrays allows you to take advantage of an array's memory efficient nature and easily perform mathematical operations on your data.  

_________________________________________________________________________________________________________________________________

Bringing it all together: Festivus!
In this exercise, you will be throwing a party—a Festivus if you will!

You have a list of guests (the names list). Each guest, for whatever reason, has decided to show up to the party in 10-minute increments. For example, Jerry shows up to Festivus 10 minutes into the party's start time, Kramer shows up 20 minutes into the party, and so on and so forth.

We want to write a few simple lines of code, using the built-ins we have covered, to welcome each of your guests and let them know how many minutes late they are to your party. Note that numpy has been imported into your session as np and the names list has been loaded as well.

Let's welcome your guests!

Instructions 1/4
25 XP
1
2
3
4
Use range() to create a list of arrival times (10 through 50 incremented by 10). Create the list arrival_times by unpacking the range object.


# Create a list of arrival times
arrival_times = [*range(10, 60, 10)]

print(arrival_times)
<script.py> output:
    [10, 20, 30, 40, 50]



You realize your clock is three minutes fast. Convert the arrival_times list into a numpy array (called arrival_times_np) and use NumPy broadcasting to subtract three minutes from each arrival time.

# Create a list of arrival times
arrival_times = [*range(10,60,10)]

# Convert arrival_times to an array and update the times
arrival_times_np = np.array(arrival_times)
new_times = arrival_times_np - 3

print(new_times)

<script.py> output:
    [ 7 17 27 37 47]
    
    
   Use list comprehension with enumerate() to pair each guest in the names list to their updated arrival time in the new_times array. You'll need to use the index variable created from using enumerate() on new_times to index the names list.
   
  Hint
When using enumerate(), the first variable is called an index variable. The second variable is called the iterator variable. Use i as the index variable and time as the iterator variable in when you use enumerate() in your list comprehension.
You'll need to use the index variable (i) created from using enumerate() on new_times to index the names list (i.e., names[i]) within your list comprehension. 
    
    # Create a list of arrival times
arrival_times = [*range(10,60,10)]

# Convert arrival_times to an array and update the times
arrival_times_np = np.array(arrival_times)
new_times = arrival_times_np - 3

# Use list comprehension and enumerate to pair guests to new times
guest_arrivals = [(names[i],time) for i,time in enumerate(new_times)]

print(guest_arrivals)

<script.py> output:
    [ 7 17 27 37 47]


A function named welcome_guest() has been pre-loaded into your session. Use map() to apply this function to each element of the guest_arrivals list and save it as the variable welcome_map.

# Create a list of arrival times
arrival_times = [*range(10,60,10)]

# Convert arrival_times to an array and update the times
arrival_times_np = np.array(arrival_times)
new_times = arrival_times_np - 3

# Use list comprehension and enumerate to pair guests to new times
guest_arrivals = [(names[i],time) for i,time in enumerate(new_times)]


<script.py> output:
    [ 7 17 27 37 47]




# Map the welcome_guest function to each (guest,time) pair
welcome_map = map(welcome_guest, guest_arrivals)

guest_welcomes = [*welcome_map]
print(*guest_welcomes, sep='\n')


<script.py> output:
    [('Jerry', 7), ('Kramer', 17), ('Elaine', 27), ('George', 37), ('Newman', 47)]

<script.py> output:
    Welcome to Festivus Jerry... You're 7 min late.
    Welcome to Festivus Kramer... You're 17 min late.
    Welcome to Festivus Elaine... You're 27 min late.
    Welcome to Festivus George... You're 37 min late.
    Welcome to Festivus Newman... You're 47 min late.
    
    
    
     +93 XP
Congratulations and happy Festivus! You're using Python built-ins like a pro and well on your way to writing efficient Python code. Believe it or not, there is a way to make these simple lines of code even more efficient! We'll cover this in a future chapter, so continue on to see how!

==================================================================================================================================


2
Timing and profiling code
0%
In this chapter, you will learn how to gather and compare runtimes between different coding approaches. You'll practice using the line_profiler and memroy_profiler packages to profile your code base and spot bottlenecks. Then, you'll put your learnings to practice by replacing these bottlenecks with efficient Python code.


_________________________________________________________________________________________________________________________________

Using %timeit: your turn!
You'd like to create a list of integers from 0 to 50 using the range() function. However, you are unsure whether using list comprehension or unpacking the range object into a list is faster. Let's use %timeit to find the best implementation.

For your convenience, a reference table of time orders of magnitude is provided below (faster at the top).

symbol	name	unit (s)
ns	nanosecond	10-9
µs (us)	microsecond	10-6
ms	millisecond	10-3
s	second	100
Instructions 1/3
35 XP
1
2
3
Use list comprehension and range() to create a list of integers from 0 to 50 called nums_list_comp.

# Create a list of integers (0-50) using list comprehension
nums_list_comp = [num for num in range(0,51)]
print(nums_list_comp)



Use range() to create a list of integers from 0 to 50 and unpack its contents into a list called nums_unpack.

# Create a list of integers (0-50) using list comprehension
nums_list_comp = [num for num in range(51)]
print(nums_list_comp)

# Create a list of integers (0-50) by unpacking range
nums_unpack = [*(nums_list_comp)]
print(nums_unpack)


Question
Use %timeit within your IPython console to compare the runtimes for creating a list of integers from 0 to 50 using list comprehension vs. unpacking the range object. Don't include the print() statements when timing.

Which method was faster?

_________________________________________________________________________________________________________________________________

Using %timeit: specifying number of runs and loops
A list of 480 superheroes has been loaded into your session (called heroes). You'd like to analyze the runtime for converting this heroes list into a set. Instead of relying on the default settings for %timeit, you'd like to only use 5 runs and 25 loops per each run.

What is the correct syntax when using %timeit and only using 5 runs with 25 loops per each run?

Possible Answers
timeit -runs5 -loops25 set(heroes)
%%timeit -r5 -n25 set(heroes)
%timeit set(heroes), 5, 25
%timeit -r5 -n25 set(heroes)

 +50 XP
Correct! %timeit lets you specify the number of runs and number of loops you want to consider with the -r and -n flags. You can use -r5 and -n25 to specify 5 iterations each with 25 loops when calculating the average and standard deviation of runtime for your code.
_________________________________________________________________________________________________________________________________


Using %timeit: formal name or literal syntax
Python allows you to create data structures using either a formal name or a literal syntax. In this exercise, you'll explore how using a literal syntax for creating a data structure can speed up runtimes.

data structure	formal name	literal syntax
list	list()	[]
dictionary	dict()	{}
tuple	tuple()	()
Instructions 1/3
35 XP
1
2
3
Create an empty list called formal_list using the formal name (list()).
Create an empty list called literal_list using the literal syntax ([]).


# Create a list using the formal name
formal_list = list()
print(formal_list)

# Create a list using the literal syntax
literal_list = []
print(literal_list)



Print out the type of formal_list and literal_list to show that both naming conventions create a list.

# Create a list using the formal name
formal_list = list()
print(formal_list)

# Create a list using the literal syntax
literal_list = []
print(literal_list)

# Print out the type of formal_list
print(type(formal_list))

# Print out the type of literal_list
print(type(literal_list))


Instructions 3/3
30 XP
3
Question
Use %timeit in your IPython console to compare runtimes between creating a list using the formal name (list()) and the literal syntax ([]). Don't include the print() statements when timing.

Which naming convention is faster?

 +100 XP
Great job! Using Python's literal syntax to define a data structure can speed up your runtime. Consider using the literal syntaxes (like [] instead of list(), {} instead of dict(), or () instead of tuple()), where applicable, to gain some speed.


_________________________________________________________________________________________________________________________________


Using cell magic mode (%%timeit)
From here on out, you'll be working with a superheroes dataset. For this exercise, a list of each hero's weight in kilograms (called wts) is loaded into your session. You'd like to convert these weights into pounds.

You could accomplish this using the below for loop:

hero_wts_lbs = []
for wt in wts:
    hero_wts_lbs.append(wt * 2.20462)
Or you could use a numpy array to accomplish this task:

wts_np = np.array(wts)
hero_wts_lbs_np = wts_np * 2.20462
Use %%timeit in your IPython console to compare runtimes between these to approaches. Make sure to press SHIFT+ENTER after the magic command to add a new line before writing the code you wish to time. After you've finished coding, answer the following question:

Which of the above techniques is faster?


 +50 XP
Nice work! You used %%timeit (cell magic mode) to time multiple lines of code. Converting the wts list into a NumPy array and taking advantage of NumPy array broadcasting saved you some time! Moving forward, remember that you can use %timeit to gather runtime for a single line of code (line magic mode) and %%timeit to get the runtime for multiple lines of code.
_________________________________________________________________________________________________________________________________





==================================================================================================================================


3
Gaining efficiencies
0%
This chapter covers more complex efficiency tips and tricks. You'll learn a few useful built-in modules for writing efficient code and practice using set theory. You'll then learn about looping patterns in Python and how to make them more efficient.



==================================================================================================================================



4
Basic pandas optimizations
0%
This chapter offers a brief introduction on how to efficiently work with pandas DataFrames. You'll learn the various options you have for iterating over a DataFrame. Then, you'll learn how to efficiently apply functions to data stored in a DataFrame.
