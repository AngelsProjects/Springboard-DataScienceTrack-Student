---------Customizing Plots---------------------------------------------------------------------------------------------------

Plotting multiple graphs
Strategies:

  -Plotting many graphs on a common axis
  -Creating axes within a figure
  -Creating subplots within a figure
  
  
Ex:
		import matplotlib.pyplot as plt
		plt.plot(t,temperature,'r')
		plt.plot(t,dewpoint,'b') #Appears on same axes
	plt.xlabel('Date')
		plt.title('Temperature & Dew Point')
		plt.show() #Renders plot objects t screen

Using axes
	Laying figures out with separate axes side by side

			plt.axes([0.05,0.05,0.425,0.9])
			plt.plot(t,temperature,'r')
			plt.xlabel('Date')
			plt.title('Temperature')
			plt.axes([0.05,0.05,0.425,0.9])
			plt.plot(t, dewpoint,'b')
			plt.xlabel('Date')
			plt.title('Dew Point')
			plt.show()

					
The axes() command
	-Syntx: axes([x_lo, y_lo, width, height])
	-Units between 0 and 1 (figure dimensions)
					
Using subplot()
	Ex: for the 2 graphs in top of eah other
	
			plt.subplot(2,1,1)
			plt.plot(t,temperature,'r')
			plt.xlabel('Date')
			plt.title('Temperature')
			plt.subplot(2,1,2)
			plt.plot(t, dewpoint,'b')
			plt.xlabel('Date')
			plt.title('Dew Point')
			plt.tight_layout()
					
					
The subplot()command
	-Syntax: subplot(nrows, ncols, nsubplot)
	-Subplot ordering:
		-Row-wise from top left
		-Indexed from 1
  
  
  
  
  
  ________________________________________________________________________________________________________________
  Multiple plots on single axis
It is time now to put together some of what you have learned and combine line plots on a common set of axes. The data set here comes from records of undergraduate degrees awarded to women in a variety of fields from 1970 to 2011. You can compare trends in degrees most easily by viewing two curves on the same set of axes.

Here, three NumPy arrays have been pre-loaded for you: year (enumerating years from 1970 to 2011 inclusive), physical_sciences (representing the percentage of Physical Sciences degrees awarded to women each in corresponding year), and computer_science (representing the percentage of Computer Science degrees awarded to women in each corresponding year).

You will issue two plt.plot() commands to draw line plots of different colors on the same set of axes. Here, year represents the x-axis, while physical_sciences and computer_science are the y-axes.

INSTRUCTIONS
100 XP
Import matplotlib.pyplot as its usual alias.
Add a 'blue' line plot of the % of degrees awarded to women in the Physical Sciences (physical_sciences) from 1970 to 2011 (year). Note that the x-axis should be specified first.
Add a 'red' line plot of the % of degrees awarded to women in Computer Science (computer_science) from 1970 to 2011 (year).
Use plt.show() to display the figure with the curves on the same axes.


  
  
  # Import matplotlib.pyplot
import matplotlib.pyplot as plt

# Plot in blue the % of degrees awarded to women in the Physical Sciences
plt.plot(year, physical_sciences, color = 'blue')

# Plot in red the % of degrees awarded to women in Computer Science
plt.plot(year, computer_science, color = 'red')

# Display the plot
plt.show()



 ___________________________________________________________________________________________________
 Using axes()
Rather than overlaying line plots on common axes, you may prefer to plot different line plots on distinct axes. The command plt.axes() is one way to do this (but it requires specifying coordinates relative to the size of the figure).

Here, you have the same three arrays year, physical_sciences, and computer_science representing percentages of degrees awarded to women over a range of years. You will use plt.axes() to create separate sets of axes in which you will draw each line plot.

In calling plt.axes([xlo, ylo, width, height]), a set of axes is created and made active with lower corner at coordinates (xlo, ylo) of the specified width and height. Note that these coordinates can be passed to plt.axes() in the form of a list or a tuple.

The coordinates and lengths are values between 0 and 1 representing lengths relative to the dimensions of the figure. After issuing a plt.axes() command, plots generated are put in that set of axes.

INSTRUCTIONS
100 XP
INSTRUCTIONS
100 XP
Create a set of plot axes with lower corner xlo and ylo of 0.05 and 0.05, width of 0.425, and height of 0.9 (in units relative to the figure dimension).
Note: Remember to pass these coordinates to plt.axes() in the form of a list: [xlo, ylo, width, height].
Plot the percentage of degrees awarded to women in Physical Sciences in blue in the active axes just created.
Create a set of plot axes with lower corner xlo and ylo of 0.525 and 0.05, width of 0.425, and height of 0.9 (in units relative to the figure dimension).
Plot the percentage of degrees awarded to women in Computer Science in red in the active axes just created.
  
  
  # Create plot axes for the first line plot
plt.axes([0.05, 0.05, 0.425, 0.9])

# Plot in blue the % of degrees awarded to women in the Physical Sciences
plt.plot(year, physical_sciences, color='blue')

# Create plot axes for the second line plot
plt.axes([0.525, 0.05, 0.425, 0.9])

# Plot in red the % of degrees awarded to women in Computer Science
plt.plot(year, computer_science, color='red')


# Display the plot
plt.show()

_______________________________________________________________________________________________________________
Using subplot() (1)
The command plt.axes() requires a lot of effort to use well because the coordinates of the axes need to be set manually. A better alternative is to use plt.subplot() to determine the layout automatically.

In this exercise, you will continue working with the same arrays from the previous exercises: year, physical_sciences, and computer_science. Rather than using plt.axes() to explicitly lay out the axes, you will use plt.subplot(m, n, k) to make the subplot grid of dimensions m by n and to make the kth subplot active (subplots are numbered starting from 1 row-wise from the top left corner of the subplot grid).

INSTRUCTIONS
100 XP
Use plt.subplot() to create a figure with 1x2 subplot layout & make the first subplot active.
Plot the percentage of degrees awarded to women in Physical Sciences in blue in the active subplot.
Use plt.subplot() again to make the second subplot active in the current 1x2 subplot grid.
Plot the percentage of degrees awarded to women in Computer Science in red in the active subplot.



# Create a figure with 1x2 subplot and make the left subplot active
plt.subplot(1,2,1)

# Plot in blue the % of degrees awarded to women in the Physical Sciences
plt.plot(year, physical_sciences, color='blue')
plt.title('Physical Sciences')

# Make the right subplot active in the current 1x2 subplot grid
plt.subplot(1,2,2)

# Plot in red the % of degrees awarded to women in Computer Science
plt.plot(year, computer_science, color='red')
plt.title('Computer Science')

# Use plt.tight_layout() to improve the spacing between subplots
plt.tight_layout()
plt.show()

  
  
  ________________________________________________________________________________________________________________________________
  
  
  Using subplot() (2)
Now you have some familiarity with plt.subplot(), you can use it to plot more plots in larger grids of subplots of the same figure.

Here, you will make a 2×2 grid of subplots and plot the percentage of degrees awarded to women in Physical Sciences (using physical_sciences), in Computer Science (using computer_science), in Health Professions (using health), and in Education (using education).

INSTRUCTIONS
100 XP
Create a figure with 2×2 subplot layout, make the top, left subplot active, and plot the % of degrees awarded to women in Physical Sciences in blue in the active subplot.
Make the top, right subplot active in the current 2×2 subplot grid and plot the % of degrees awarded to women in Computer Science in red in the active subplot.
Make the bottom, left subplot active in the current 2×2 subplot grid and plot the % of degrees awarded to women in Health Professions in green in the active subplot.
Make the bottom, right subplot active in the current 2×2 subplot grid and plot the % of degrees awarded to women in Education in yellow in the active subplot.


# Create a figure with 2x2 subplot layout and make the top left subplot active
plt.subplot(2,2,1)

# Plot in blue the % of degrees awarded to women in the Physical Sciences
plt.plot(year, physical_sciences, color='blue')
plt.title('Physical Sciences')

# Make the top right subplot active in the current 2x2 subplot grid 
plt.subplot(2,2,2)

# Plot in red the % of degrees awarded to women in Computer Science
plt.plot(year, computer_science, color='red')
plt.title('Computer Science')

# Make the bottom left subplot active in the current 2x2 subplot grid
plt.subplot(2,2,3)

# Plot in green the % of degrees awarded to women in Health Professions
plt.plot(year, health, color='green')
plt.title('Health Professions')

# Make the bottom right subplot active in the current 2x2 subplot grid
plt.subplot(2,2,4)


# Plot in yellow the % of degrees awarded to women in Education
plt.plot(year, education, color='yellow')
plt.title('Education')

# Improve the spacing between subplots and display them
plt.tight_layout()
plt.show()


_________________________________________________________________________________________________________________________________________

Customizing axes:

Controlling axis extents -- sa you want to zoom in on a part

		-axis([xmin, xmax, ymin, ymax]) sets axis elements
		-Control over individual axis extents
			-xlim([xmin, xmax])
			-ylim([ymin, ymax])
		-Can use tuples, lists for extents
			e.g. xlim((-2,3)) works
			e.g. xlim([-2,3]) works also
			
			
GDP over time

		import matplotlib.pyplot as plt
		plt.plot(yr, gdp)
		plt.xlabel('Year')
		plt.ylabel('Billions of Doollars')
		plt.title('US Gross Domestic product')
		plt.show()
		
		
		
  Using xlim (can limit the x view):
  
  		plt.plot(yr, gdp)
		plt.xlabel('Year')
		plt.ylabel('Billions of Dollars')
		plt.title('US Gross Domestic Product')
		plt.xlim((1947,1957))
		plt.show()
		
		
  
  
  Using xlim & ylim:
  
  		plt.plot(yr, gdp)
		plt.xlabel('Year')
		plt.ylabel('Billions of Dollars')
		plt.title('US Gross Domestic Product')
		plt.xlim((1947,1957))
		plt.ylim((0,1000))
		plt.show()
		
  
  
  
  Using axis (can replace xlim & ylim all at once):

		plt.plot(yr, gdp)
		plt.xlabel('Year')
		plt.ylabel('Billions of Dollars')
		plt.title('US Gross Domestic Product')
		plt.axis((1947,1957,0,600))
		plt.show()
  
  
  
  Other axis() options:
  
  	axis('off') - turns off axis lines, labels
	axis('equal') - equal scaling on x, y axes
	axis('square') - forces square plot
	axis('tight') - sets xlim(), ylim() to show all data
	
	
	
  ________________________________________________________________________________________________________________________
Using xlim(), ylim()
In this exercise, you will work with the matplotlib.pyplot interface to quickly set the x- and y-limits of your plots.

You will now create the same figure as in the previous exercise using plt.plot(), this time setting the axis extents using plt.xlim() and plt.ylim(). These commands allow you to either zoom or expand the plot or to set the axis ranges to include important values (such as the origin).

In this exercise, as before, the percentage of women graduates in Computer Science and in the Physical Sciences are held in the variables computer_science and physical_sciences respectively over year.

After creating the plot, you will use plt.savefig() to export the image produced to a file.

INSTRUCTIONS
100 XP
Use plt.xlim() to set the x-axis range to the period between the years 1990 and 2010.
Use plt.ylim() to set the y-axis range to the interval between 0% and 50% of degrees awarded.
Display the final figure with plt.show() and save the output to 'xlim_and_ylim.png'.


# Plot the % of degrees awarded to women in Computer Science and the Physical Sciences
plt.plot(year,computer_science, color='red') 
plt.plot(year, physical_sciences, color='blue')

# Add the axis labels
plt.xlabel('Year')
plt.ylabel('Degrees awarded to women (%)')

# Set the x-axis range
plt.xlim((1990,2010))

# Set the y-axis range
plt.ylim((0, 50))

# Add a title and display the plot
plt.title('Degrees awarded to women (1990-2010)\nComputer Science (red)\nPhysical Sciences (blue)')
plt.show()

# Save the image as 'xlim_and_ylim.png'
plt.savefig('xlim_and_ylim.png')



________________________________________________________________________________________________________________________
Using axis()
Using plt.xlim() and plt.ylim() are useful for setting the axis limits individually. In this exercise, you will see how you can pass a 4-tuple to plt.axis() to set limits for both axes at once. For example, plt.axis((1980,1990,0,75)) would set the extent of the x-axis to the period between 1980 and 1990, and would set the y-axis extent from 0 to 75% degrees award.

Once again, the percentage of women graduates in Computer Science and in the Physical Sciences are held in the variables computer_science and physical_sciences where each value was measured at the corresponding year held in the year variable.

INSTRUCTIONS
100 XP
Use plt.axis() to select the time period between 1990 and 2010 on the x-axis as well as the interval between 0 and 50% awarded on the y-axis.
Save the resulting plot as 'axis_limits.png'.

# Plot in blue the % of degrees awarded to women in Computer Science
plt.plot(year,computer_science, color='blue')

# Plot in red the % of degrees awarded to women in the Physical Sciences
plt.plot(year, physical_sciences,color='red')

# Set the x-axis and y-axis limits
plt.axis((1990,2010,0,50))

# Show the figure
plt.show()

# Save the figure as 'axis_limits.png'

plt.savefig('axis_limits.png')

______________________________________________________________________________________________________________________________

Legends, Annotations, and Styles

Legends
	- Provide labels for overlaid points and curves
	
			ex: This assigns colors to the different types of data
				
				import matplotlib.pyplot as plt
				
				plt.scatter(setosa_len, setosa_wid, marker='o', color='red', label='setosa')
				plt.scatter(versicolor_len, versicolor_wid, marker='o', color='green',label='versicolor')
				plt.scatter(virginia_len, viriginica_wid, marker='o', color='blue',label='virginica')
				
			ex: This creates the actual legend
			
				plt.legend(loc='upper right')
				plt.title('Iris data')
				plt.xlabel('sepal length (cm)')
				plt.ylabel('sepal width (cm)')
				plt.show()
				
Plot Annotations:
	-Text labels and arrows using the annotate() method
	-Flexible specification of coordinates
	-Keyword arrowprops: dict of arrow properties
		-width
		-color
		-etc
		

Using annotate() for text

	plt.annotate('setosa',xy=(5.0,3.5))
	plt.annotate('virginica',xy=(7.25,3.5))
	plt.annotate('versicolor',xy=(5.0,2.0))
	plt.show()
	
	
	
Options for annotate():

	-s - text of label
	-xy - coordinates to annotate
	- xytext - coordinates of label
	- arrowprops - controls drawing of arrow
	
	
				
				
Using annotate() for arrows:
		- example: To add lebeled arrows to graphs
		
			plt.annotate('setosa',xy=(0.5,3.5), xytext=(4.25,4.0), arrowprops={'color':'red'})
			plt.annotate('virginica', xy=(7.2,3.6), xytext=(6.5,4.0), arrowprops = {'color':'blue'})
			plt.annotate('versicolor', xy=(5.05, 1.95), xytext=(5.5,1.75), arrowprops={'color':'green'})
			plt.show()



Working with plot styles:

		-Style sheets in Matplotlib
		-Defaults for lines, points, backgrounds, etc.
		-Switch styles globally with plt.style.use()
		-plt.style.available: list of styles
		


	
Can use different style sheets

		ex: ggplot style sheet
		
			import matplotlib.pyplot as plt
			plt.style.use('ggplot')
			
		ex: five thirtyeight style sheet
		
			import matplotlib.pyplot as plt
			plt.style.use('fivethirtyeight')
			


  
  
  
  ________________________________________________________________________________________________________________________
  Using legend()
Legends are useful for distinguishing between multiple datasets displayed on common axes. The relevant data are created using specific line colors or markers in various plot commands. Using the keyword argument label in the plotting function associates a string to use in a legend.

For example, here, you will plot enrollment of women in the Physical Sciences and in Computer Science over time. You can label each curve by passing a label argument to the plotting call, and request a legend using plt.legend(). Specifying the keyword argument loc determines where the legend will be placed.

INSTRUCTIONS
100 XP
Modify the plot command provided that draws the enrollment of women in Computer Science over time so that the curve is labelled 'Computer Science' in the legend.
Modify the plot command provided that draws the enrollment of women in the Physical Sciences over time so that the curve is labelled 'Physical Sciences' in the legend.
Add a legend at the lower center (i.e., loc='lower center').


  # Specify the label 'Computer Science'
plt.plot(year, computer_science, color='red', label='Computer Science') 

# Specify the label 'Physical Sciences' 
plt.plot(year, physical_sciences, color='blue', label='Physical Sciences')

# Add a legend at the lower center
plt.legend(loc='lower center')

# Add axis labels and title
plt.xlabel('Year')
plt.ylabel('Enrollment (%)')
plt.title('Undergraduate enrollment of women')
plt.show()


______________________________________________________________________________________________________________________________

  
  Using annotate()
It is often useful to annotate a simple plot to provide context. This makes the plot more readable and can highlight specific aspects of the data. Annotations like text and arrows can be used to emphasize specific observations.

Here, you will once again plot enrollment of women in the Physical Sciences and Computer science over time. The legend is set up as before. Additionally, you will mark the inflection point when enrollment of women in Computer Science reached a peak and started declining using plt.annotate().

To enable an arrow, set arrowprops=dict(facecolor='black'). The arrow will point to the location given by xy and the text will appear at the location given by xytext.

INSTRUCTIONS
100 XP
INSTRUCTIONS
100 XP
Compute the maximum enrollment of women in Computer Science using the .max() method.
Calculate the year in which there was maximum enrollment of women in Computer Science using the .argmax() method.
Annotate the plot with an arrow at the point of peak women enrolling in Computer Science.
Label the arrow 'Maximum'. The parameter for this is s, but you don't have to specify it.
Pass in the arguments to xy and xytext as tuples.
For xy, use the yr_max and cs_max that you computed.
For xytext, use (yr_max+5, cs_max+5) to specify the displacement of the label from the tip of the arrow.
Draw the arrow by specifying the keyword argument arrowprops=dict(facecolor='black'). The single letter shortcut for 'black' is 'k'.

  
  # Plot with legend as before
plt.plot(year, computer_science, color='red', label='Computer Science') 
plt.plot(year, physical_sciences, color='blue', label='Physical Sciences')
plt.legend(loc='lower right')

# Compute the maximum enrollment of women in Computer Science: cs_max
cs_max = computer_science.max()

# Calculate the year in which there was maximum enrollment of women in Computer Science: yr_max
yr_max = year[computer_science.argmax()]

# Add a black arrow annotation
plt.annotate('Maximum',xy=(yr_max, cs_max), xytext=((yr_max+5, cs_max+5)),arrowprops={'facecolor':'black'})

# Add axis labels and title
plt.xlabel('Year')
plt.ylabel('Enrollment (%)')
plt.title('Undergraduate enrollment of women')
plt.show()


________________________________________________________________________________________________________________________

Modifying styles
Matplotlib comes with a number of different stylesheets to customize the overall look of different plots. To activate a particular stylesheet you can simply call plt.style.use() with the name of the style sheet you want. To list all the available style sheets you can execute: print(plt.style.available).

INSTRUCTIONS
100 XP
Import matplotlib.pyplot as its usual alias.
Activate the 'ggplot' style sheet with plt.style.use().

# Import matplotlib.pyplot
import matplotlib.pyplot as plt

# Set the style to 'ggplot'
plt.style.use('ggplot')

# Create a figure with 2x2 subplot layout
plt.subplot(2, 2, 1) 

# Plot the enrollment % of women in the Physical Sciences
plt.plot(year, physical_sciences, color='blue')
plt.title('Physical Sciences')

# Plot the enrollment % of women in Computer Science
plt.subplot(2, 2, 2)
plt.plot(year, computer_science, color='red')
plt.title('Computer Science')

# Add annotation
cs_max = computer_science.max()
yr_max = year[computer_science.argmax()]
plt.annotate('Maximum', xy=(yr_max, cs_max), xytext=(yr_max-1, cs_max-10), arrowprops=dict(facecolor='black'))

# Plot the enrollmment % of women in Health professions
plt.subplot(2, 2, 3)
plt.plot(year, health, color='green')
plt.title('Health Professions')

# Plot the enrollment % of women in Education
plt.subplot(2, 2, 4)
plt.plot(year, education, color='yellow')
plt.title('Education')

# Improve spacing between subplots and display them
plt.tight_layout()
plt.show()

_________________________________________________________________________________________________________________

Working with 2D Arrays
-Now let's see how to plot 2D arrays (somtimes called raster data) that represent images or functions of two variables (alsoknow as bivariate functions)


Reminder: NumOy Arrays

	-Homogeneous in type
	-Calculations all at once
	-Indexing with brackets:
		-A[index] for 1D array
		-A[index0, index1] for 2D array
		
		
		
		
Reminder: Slicing Arrays

	-Slicing: 1D arrays: A[slice], 2D arrays: A[slice0, slice1]
	-Slicing: slice=start:stop:stride
		-Indexes from start to stop-1 in steps of stride
		-Missing start: implicitly at beginning of array
		-Missing stop: implicitly at end of array
		-Missing stride: implicitly stride 1
	-Negative indexes/slices: count from end of array
	
	
Using meshgrid()

	ex: 
		import numoy as np
		u = np.linspace(-2,2,3) ###Linspace = creates 1D array
		v = np.linspace(-1,1,5) ### Two linspaces creates 2D space
		X,Y = np.meshgrid(u,v) ### Creates the grid from the two arrays
		Z = X**2/25 + Y**2/4
		
		
		###Resulting 2D arrays have identical shape but are constant valued along different axes
		###The entries of X and Y taken pairwise correspond to rectangular coordinates of a grid or mesh of points in the xy plane
		###The meshgrid presented by XY makes evaluating a bivariate function very easy 
		
		
Sampling on a grid

		ex: 
		
		import numpy as np
		import matplotlib.pyplot as plt
		
		u = np.linspace(-2,2,3)
		v= np.linspace(-1,1,5)
		X,Y = np.meshgrid(u,v)
		Z=X**2/25 + Y**2/4
		
		print('Z:\n',Z)   ###Fills every part of array
		plt.set_cmap('grayscale')
		plt.pcolor(Z)
		plt.show()
		
		
Oriientations of 2D arrays & images


______________________________________________________________________________________________________________________________

		
  Generating meshes
In order to visualize two-dimensional arrays of data, it is necessary to understand how to generate and manipulate 2-D arrays. Many Matplotlib plots support arrays as input and in particular, they support NumPy arrays. The NumPy library is the most widely-supported means for supporting numeric arrays in Python.

In this exercise, you will use the meshgrid function in NumPy to generate 2-D arrays which you will then visualize using plt.imshow(). The simplest way to generate a meshgrid is as follows:

import numpy as np
Y,X = np.meshgrid(range(10),range(20))
This will create two arrays with a shape of (20,10), which corresponds to 20 rows along the Y-axis and 10 columns along the X-axis. In this exercise, you will use np.meshgrid() to generate a regular 2-D sampling of a mathematical function.

INSTRUCTIONS
100 XP
INSTRUCTIONS
100 XP
Import the numpy and matplotlib.pyplot modules using the respective aliases np and plt.
Generate two one-dimensional arrays u and v using np.linspace(). The array u should contain 41 values uniformly spaced beween -2 and +2. The array v should contain 21 values uniformly spaced between -1 and +1.
Construct two two-dimensional arrays X and Y from u and v using np.meshgrid(). The resulting arrays should have shape (41,21).
After the array Z is computed using X and Y, visualize the array Z using plt.pcolor() and plt.show().
Save the resulting figure as 'sine_mesh.png'.


  
  
  # Import numpy and matplotlib.pyplot
import numpy as np
import matplotlib.pyplot as plt

# Generate two 1-D arrays: u, v
u = np.linspace(-2, 2, 41)
v = np.linspace(-1, 1, 21)

# Generate 2-D arrays from u and v: X, Y
X,Y = np.meshgrid(u,v)

# Compute Z based on X and Y
Z = np.sin(3*np.sqrt(X**2 + Y**2)) 

# Display the resulting image with pcolor()
plt.pcolor(Z)
plt.show()

# Save the figure to 'sine_mesh.png'
plt.savefig('sine_mesh.png')


_________________________________________________________________________________________________________________________

The commands

In [1]: plt.pcolor(A, cmap='Blues')
In [2]: plt.colorbar()
In [3]: plt.show()
produce the pseudocolor plot above using a Numpy array A. Which of the commands below could have generated A?

numpy and matplotlib.pyplot have been imported as np and plt respectively. Play around in the IPython shell with different arrays and generate pseudocolor plots from them to identify which of the below commands could have generated A.

___________________________________________________________________________________________________________________
Visualizing bivariate functions

-Visualize data from a bivariate function sampled on a 2D array
-Assume function Z comes from evaluating a functin on a mesh grid

Creating a pseudocolor plot

		import numpy as np
		import matplotlib.pyplot as plt
		u= np.linspace(-2,2,65)
		v= np.linspace(-1,1,33)
		X,Y = np.meshgrid(u,v)
		Z= X**2/25 + Y**2/4
		plt.pcolor(Z)         ###Many colors as opposed to grayscale
		plt.show()
		
		
	
Colorbar

		plt.pcolor(Z)
		plt.colorbar()
		plt.show()
		
		
			###Will display a color map - associates numerical values with colors in some continuous way
			###Just like gray scale maps the specturm from 
			
		#Can choose a number of different options
		Ex:
		
		plt.pcolor(Z, cmap='gray')    ### Choosing this option forces a gray scale image
		plt.colorbar()
		plt.show()
			
		Ex:
		
  		plt.pcolor(Z, cmap='autumn')    ### Results in colors from orange to yellow
		plt.colorbar()
		plt.show()
		
  
  Axis Tight
  #To fix the problem of empty space around the pseudo colored chart
  
  	plt.pcolor(Z)
	plt.colorbar()
	plt.axis('tight')   # Use this to get rid of empty space around pcolor
	plt.show()
	
	
Plot Using Meshgrid
	-We can fix dead space and axis numbering by calling
	
	plt.pcolor(X,Y,Z) # X, Y are 2D meshgrids
	plt.colorbar() 
	plt.show()
	
	The resulting figures has axis ticks determined by the X,Y and corresponding to the X & Y coordinates
	
Contour plots	
	Pseudocolor plots can be pixelated, which may be appropriate for data that is inherently blocky or discontinuous
	But we can use the function contour to make contour plots when the data varies continuously
	
	Ex: 
			plt.contour(Z)
			plt.show()
	
	We cna see that contour are smooth curved along which values presented by the data are infered to be constant valued 
	Contour maps comes from topographical maps where the contours are assumed to be points at the same height above sea level
	
	ex: 
	
		plt.contour(Z,30)  #Specify number of contours to draw; in this case number = 30
		plt.show()
		
		
Contour plot using meshgrid:
	
	ex: Can also supply meshgrid's X,Y matrices as arguments just as with pcolor
	
	plt.contour(X,Y,Z,30)
	plt.show()
	
  
 Filled contour plots
 
 	ex: 
	
	plt.contourf(X,Y,Z,30)
	plt.colorbar()
	plt.show()
	
	
__________________________________________________________________________________________________________________

Contour & filled contour plots
Although plt.imshow() or plt.pcolor() are often used to visualize a 2-D array in entirety, there are other ways of visualizing such data without displaying all the available sample values. One option is to use the array to compute contours that are visualized instead.

Two types of contour plot supported by Matplotlib are plt.contour() and plt.contourf() where the former displays the contours as lines and the latter displayed filled areas between contours. Both these plotting commands accept a two dimensional array from which the appropriate contours are computed.

In this exercise, you will visualize a 2-D array repeatedly using both plt.contour() and plt.contourf(). You will use plt.subplot() to display several contour plots in a common figure, using the meshgrid X, Y as the axes. For example, plt.contour(X, Y, Z) generates a default contour map of the array Z.

Using the meshgrid X, Y as axes:
Generate a default contour plot of the array Z in the upper left subplot.
Generate a contour plot of the array Z in the upper right subplot with 20 contours.
Generate a default filled contour plot of the array Z in the lower left subplot.
Generate a default filled contour plot of the array Z in the lower right subplot with 20 contours.
Improve the spacing between the subplots with plt.tight_layout() and display the figure.

# Generate a default contour map of the array Z
plt.subplot(2,2,1)
plt.contour(X,Y,Z)
plt.show()

# Generate a contour map with 20 contours
plt.subplot(2,2,2)
plt.contour(X,Y,Z,20)
plt.show()

# Generate a default filled contour map of the array Z
plt.subplot(2,2,3)
plt.contourf(X,Y,Z)
plt.show()

# Generate a default filled contour map with 20 contours
plt.subplot(2,2,4)
plt.contourf(X,Y,Z,20)
plt.show()

# Improve the spacing between subplots
plt.tight_layout()

# Display the figure
plt.show()
_____________________________________________________________________________________________________________________________



Modifying colormaps
When displaying a 2-D array with plt.imshow() or plt.pcolor(), the values of the array are mapped to a corresponding color. The set of colors used is determined by a colormap which smoothly maps values to colors, making it easy to understand the structure of the data at a glance.

It is often useful to change the colormap from the default 'jet' colormap used by matplotlib. A good colormap is visually pleasing and conveys the structure of the data faithfully and in a way that makes sense for the application.

Some matplotlib colormaps have unique names such as 'jet', 'coolwarm', 'magma' and 'viridis'.
Others have a naming scheme based on overall color such as 'Greens', 'Blues', 'Reds', and 'Purples'.
Another four colormaps are based on the seasons, namely 'summer', 'autumn', 'winter' and 'spring'.
You can insert the option cmap=<name> into most matplotlib functions to change the color map of the resulting plot.
In this exercise, you will explore four different colormaps together using plt.subplot(). You will use a pregenerated array Z and a meshgrid X, Y to generate the same filled contour plot with four different color maps. Be sure to also add a color bar to each filled contour plot with plt.colorbar().

INSTRUCTIONS
100 XP
Modify the call to plt.contourf() so the filled contours in the top left subplot use the 'viridis' colormap.
Modify the call to plt.contourf() so the filled contours in the top right subplot use the 'gray' colormap.
Modify the call to plt.contourf() so the filled contours in the bottom left subplot use the 'autumn' colormap.
Modify the call to plt.contourf() so the filled contours in the bottom right subplot use the 'winter' colormap.


  

# Create a filled contour plot with a color map of 'viridis'
plt.subplot(2,2,1)
plt.contourf(X,Y,Z,20, cmap='viridis')
plt.colorbar()
plt.title('Viridis')

# Create a filled contour plot with a color map of 'gray'
plt.subplot(2,2,2)
plt.contourf(X,Y,Z,20, cmap='gray')
plt.colorbar()
plt.title('Gray')

# Create a filled contour plot with a color map of 'autumn'
plt.subplot(2,2,3)
plt.contourf(X,Y,Z,20, cmap='autumn')
plt.colorbar()
plt.title('Autumn')

# Create a filled contour plot with a color map of 'winter'
plt.subplot(2,2,4)
plt.contourf(X,Y,Z,20, cmap='winter')
plt.colorbar()
plt.title('Winter')

# Improve the spacing between subplots and display them
plt.tight_layout()
plt.show()

_______________________________________________________________________________________________________________________


 Visualizing Bivariate Distributions
 
 Distirbutions of 2D Points:
 	- 2D points given as two 1D arrays x & y
	- Goal: generate a 2D histogram from x & Y
  
  
  Histograms in 1D
	-  GIven a collections of realizatuons of a single random variable:
		- Choose bins (intervals)
		- Count realizations w/in bins & plots
		
		ex:
			counts, bins, patches = plt.hist(x, bins=25)
			plt.show()
  
  
  Bins in 2D:
  
  	-Different shapes available for binning points
	-Common choices:
		-rectangles
		-histograms
		
		
hist2d(): Rectangular binning

	-ex:
		
		plt.hist2d(x,y, bins=(10,20)) #x & y are 1D arrays of the same length
		plt.colorbar()
		plt.xlabel('weight ($\mathrm{kg}$)')
		plt.ylabel('acceleration ($\mathrm{ms}^{-2}$}')
		plt.show()
	
hexbin(): Heagonal binning 

	-ex: 
		
		plt.hexbin(x,y,gridsize=(15,10))
		plt.colorbar()
		plt.xlabel('weight ($\mathrm{kg}$')
		plt.ylabel('acceleration ($\mathrm{ms}^{-2}$}')
		plt.show()
		
	
  
  
  ________________________________________________________________________________________________________________________

Using hist2d()
Given a set of ordered pairs describing data points, you can count the number of points with similar values to construct a two-dimensional histogram. This is similar to a one-dimensional histogram, but it describes the joint variation of two random variables rather than just one.

In matplotlib, one function to visualize 2-D histograms is plt.hist2d().

You specify the coordinates of the points using plt.hist2d(x,y) assuming x and y are two vectors of the same length.
You can specify the number of bins with the argument bins=(nx, ny) where nx is the number of bins to use in the horizontal direction and ny is the number of bins to use in the vertical direction.
You can specify the rectangular region in which the samples are counted in constructing the 2D histogram. The optional parameter required is range=((xmin, xmax), (ymin, ymax)) where
xmin and xmax are the respective lower and upper limits for the variables on the x-axis and
ymin and ymax are the respective lower and upper limits for the variables on the y-axis. Notice that the optional range argument can use nested tuples or lists.
In this exercise, you'll use some data from the auto-mpg data set. There are two arrays mpg and hp that respectively contain miles per gallon and horse power ratings from over three hundred automobiles built.

INSTRUCTIONS
100 XP
Generate a two-dimensional histogram to view the joint variation of the mpg and hp arrays.
Put hp along the horizontal axis and mpg along the vertical axis.
Specify 20 by 20 rectangular bins with the bins argument.
Specify the region covered with the optional range argument so that the plot samples hp between 40 and 235 on the x-axis and mpg between 8 and 48 on the y-axis.
Add a color bar to the histogram.


# Generate a 2-D histogram
plt.hist2d(hp,mpg, bins=(20,20), range=((40,235),(8,48)))

# Add a color bar to the histogram
plt.colorbar()

# Add labels, title, and display the plot
plt.xlabel('Horse power [hp]')
plt.ylabel('Miles per gallon [mpg]')
plt.title('hist2d() plot')
plt.show()


_________________________________________________________________________________________________________________________

  
  Using hexbin()
The function plt.hist2d() uses rectangular bins to construct a two dimensional histogram. As an alternative, the function plt.hexbin() uses hexagonal bins. The underlying algorithm (based on this article from 1987) constructs a hexagonal tesselation of a planar region and aggregates points inside hexagonal bins.

The optional gridsize argument (default 100) gives the number of hexagons across the x-direction used in the hexagonal tiling. If specified as a list or a tuple of length two, gridsize fixes the number of hexagon in the x- and y-directions respectively in the tiling.
The optional parameter extent=(xmin, xmax, ymin, ymax) specifies rectangular region covered by the hexagonal tiling. In that case, xmin and xmax are the respective lower and upper limits for the variables on the x-axis and ymin and ymax are the respective lower and upper limits for the variables on the y-axis.
In this exercise, you'll use the same auto-mpg data as in the last exercise (again using arrays mpg and hp). This time, you'll use plt.hexbin() to visualize the two-dimensional histogram.

INSTRUCTIONS
100 XP
INSTRUCTIONS
100 XP
Generate a two-dimensional histogram with plt.hexbin() to view the joint variation of the mpg and hp vectors.
Put hp along the horizontal axis and mpg along the vertical axis.
Specify a hexagonal tesselation with 15 hexagons across the x-direction and 12 hexagons across the y-direction using gridsize.
Specify the rectangular region covered with the optional extent argument: use hp from 40 to 235 and mpg from 8 to 48.
Add a color bar to the histogram.


  
 # Generate a 2d histogram with hexagonal bins
plt.hexbin(hp, mpg, gridsize=(15,12), 
           extent=(40,235,8, 48))
           
# Add a color bar to the histogram
plt.colorbar()

# Add labels, title, and display the plot
plt.xlabel('Horse power [hp]')
plt.ylabel('Miles per gallon [mpg]')
plt.title('hexbin() plot')
plt.show()

______________________________________________________________________________________________________________________
Working with Images


Images
	-Grayscale images: rectangular 2D arrays
	-Color Images: typically three 2D arrays (channels)
		-RGB (Red - Green - Blue)
	-Channel values:
		-0 to 1(floating-point numbers)
		-0 to 255 (8 bit integers)
		
  
  
  
Loading IMages:
	-ex:

		img = plt.imread('sunflower.jpg')
		print(img.shape)
		plt.imshow(img)
		plt.axis('off')
		plt.show
		
		
 Reduction to gray-scale image:

	-ex:

		collapsed = img.mean(axis=2)  ###Average the RGB channels by apply the numpy mean method along axis 2, the trailing dimension; since the color image consists of three matrices with values between 0 and 255, using the avg works as a reasonable proxy for thr RGB values when collapsing them into a single scalar intensity for  
		print(collapsed.shape)
		plt.set_cmap('gray') ##So al images will be gray
		plt.axis('off')
		plt.show()
		
		
Uneven Samples - one subelty is the pixel shape

	uneven = collapsed[::4,::2] # nonuniform subsampling
	print(uneven.shape)
	plt.imshow(uneven)
	plt.axis('off')
	plt.show()
	
	
	### As a result, when plotted the image will be distoreted 
	### Here, the aspect ratio is off with width over hiegh is 2 because of uneven sampling
	##Way to fix is adjusting the aspect ratio
	
	plt.imshow(uneven,aspect=2.0)
	plt.axis('off')
	plt.show()
	
	
  Adjusting Extent - Another way to fix the distortion
  
  	plt.imshow(uneven, cmap='gray', extent=(0,640,0,480))
	plt.axis('off')
	plt.show()
	
	
  ________________________________________________________________________________________________________

Loading, examining images
Color images such as photographs contain the intensity of the red, green and blue color channels.

To read an image from file, use plt.imread() by passing the path to a file, such as a PNG or JPG file.
The color image can be plotted as usual using plt.imshow().
The resulting image loaded is a NumPy array of three dimensions. The array typically has dimensions M×N×3, where M×N is the dimensions of the image. The third dimensions are referred to as color channels (typically red, green, and blue).
The color channels can be extracted by Numpy array slicing.
In this exercise, you will load & display an image of an astronaut (by NASA (Public domain), via Wikimedia Commons). You will also examine its attributes to understand how color images are represented.

INSTRUCTIONS
100 XP
INSTRUCTIONS
100 XP
Load the file '480px-Astronaut-EVA.jpg' into an array.
Print the shape of the img array. How wide and tall do you expect the image to be?
Prepare img for display using plt.imshow().
Turn off the axes using plt.axis('off').

  
  
  # Load the image into an array: img
img = plt.imread('480px-Astronaut-EVA.jpg')

# Print the shape of the image
print(img.shape)

# Display the image
plt.imshow(img)

# Hide the axes
plt.axis('off')
plt.show()

_________________________________________________________________________________________________________________________

  Pseudocolor plot from image data
Image data comes in many forms and it is not always appropriate to display the available channels in RGB space. In many situations, an image may be processed and analysed in some way before it is visualized in pseudocolor, also known as 'false' color.

In this exercise, you will perform a simple analysis using the image showing an astronaut as viewed from space. Instead of simply displaying the image, you will compute the total intensity across the red, green and blue channels. The result is a single two dimensional array which you will display using plt.imshow() with the 'gray' colormap.

INSTRUCTIONS
100 XP
Print the shape of the existing image array.
Compute the sum of the red, green, and blue channels of img by using the .sum() method with axis=2.
Print the shape of the intensity array to verify this is the shape you expect.
Plot intensity with plt.imshow() using a 'gray' colormap.
Add a colorbar to the figure.
  
  
# Load the image into an array: img
img = plt.imread('480px-Astronaut-EVA.jpg')

# Print the shape of the image
print(img.shape)

# Compute the sum of the red, green and blue channels: intensity
intensity = img.sum(axis=2)

# Print the shape of the intensity
print(intensity.shape)

# Display the intensity with a colormap of 'gray'
plt.imshow(intensity, cmap='gray')

# Add a colorbar
plt.colorbar()

# Hide the axes and show the figure
plt.axis('off')
plt.show()

______________________________________________________________________________________________________________________

Extent and aspect
When using plt.imshow() to display an array, the default behavior is to keep pixels square so that the height to width ratio of the output matches the ratio determined by the shape of the array. In addition, by default, the x- and y-axes are labeled by the number of samples in each direction.

The ratio of the displayed width to height is known as the image aspect and the range used to label the x- and y-axes is known as the image extent. The default aspect value of 'auto' keeps the pixels square and the extents are automatically computed from the shape of the array if not specified otherwise.

In this exercise, you will investigate how to set these options explicitly by plotting the same image in a 2 by 2 grid of subplots with distinct aspect and extent options.

INSTRUCTIONS
100 XP
INSTRUCTIONS
100 XP
Display img in the top left subplot with horizontal extent from -1 to 1, vertical extent from -1 to 1, and aspect ratio 0.5.
Display img in the top right subplot with horizontal extent from -1 to 1, vertical extent from -1 to 1, and aspect ratio 1.
Display img in the bottom left subplot with horizontal extent from -1 to 1, vertical extent from -1 to 1, and aspect ratio 2.
Display img in the bottom right subplot with horizontal extent from -2 to 2, vertical extent from -1 to 1, and aspect ratio 2.


# Load the image into an array: img
img = plt.imread('480px-Astronaut-EVA.jpg')

# Specify the extent and aspect ratio of the top left subplot
plt.subplot(2,2,1)
plt.title('extent=(-1,1,-1,1),\naspect=0.5') 
plt.xticks([-1,0,1])
plt.yticks([-1,0,1])
plt.imshow(img, extent=(-1,1,-1,1), aspect=0.5)

# Specify the extent and aspect ratio of the top right subplot
plt.subplot(2,2,2)
plt.title('extent=(-1,1,-1,1),\naspect=1')
plt.xticks([-1,0,1])
plt.yticks([-1,0,1])
plt.imshow(img, extent=(-1,1,-1,1), aspect=1)

# Specify the extent and aspect ratio of the bottom left subplot
plt.subplot(2,2,3)
plt.title('extent=(-1,1,-1,1),\naspect=2')
plt.xticks([-1,0,1])
plt.yticks([-1,0,1])
plt.imshow(img, extent=(-1,1,-1,1), aspect=2)

# Specify the extent and aspect ratio of the bottom right subplot
plt.subplot(2,2,4)
plt.title('extent=(-2,2,-1,1),\naspect=2')
plt.xticks([-2,-1,0,1,2])
plt.yticks([-1,0,1])
plt.imshow(img, extent=(-2,2,-1,1), aspect=2)

# Improve spacing and display the figure
plt.tight_layout()
plt.show()

_________________________________________________________________________________________________________________________________

Rescaling pixel intensities
Sometimes, low contrast images can be improved by rescaling their intensities. For instance, this image of Hawkes Bay, New Zealand (originally by Phillip Capper, modified by User:Konstable, via Wikimedia Commons, CC BY 2.0) has no pixel values near 0 or near 255 (the limits of valid intensities).

For this exercise, you will do a simple rescaling (remember, an image is NumPy array) to translate and stretch the pixel intensities so that the intensities of the new image fill the range from 0 to 255.

INSTRUCTIONS
100 XP
Use the methods .min() and .max() to save the minimum and maximum values from the array image as pmin and pmax respectively.
Create a new 2-D array rescaled_image using 256*(image-pmin)/(pmax-pmin)
Plot the original array image in the top subplot of a 2×1 grid.
Plot the new array rescaled_image in the bottom subplot of a 2×1 grid.


# Load the image into an array: image
image = plt.imread('640px-Unequalized_Hawkes_Bay_NZ.jpg')

# Extract minimum and maximum values from the image: pmin, pmax
pmin, pmax = image.min(), image.max()
print("The smallest & largest pixel intensities are %d & %d." % (pmin, pmax))

# Rescale the pixels: rescaled_image
rescaled_image = 256*(image-pmin)/(pmax-pmin)
print("The rescaled smallest & largest pixel intensities are %.1f & %.1f." % 
      (rescaled_image.min(), rescaled_image.max()))

# Display the original image in the top subplot
plt.subplot(2,1,1)
plt.title('original image')
plt.axis('off')
plt.imshow(image)

# Display the rescaled image in the bottom subplot
plt.subplot(2,1,2)
plt.title('rescaled image')
plt.axis('off')
plt.imshow(rescaled_image)

plt.show()

______________________________________________________________________________________________________________________________
Statistical plots with Seaborn
7%
This is a high-level tour of the Seaborn plotting library for producing statistical graphics in Python. The tour covers Seaborn tools for computing and visualizing linear regressions as well as tools for visualizing univariate distributions (e.g., strip, swarm, and violin plots) and multivariate distributions (e.g., joint plots, pair plots, and heatmaps). This also includes a discussion of grouping categories in plots.
______________________________________________________________________________________________________________________________
Visualizing Regressions

We'll now extend our toolbox with Seaborn

https://seaborn.pydata.org/

Seaborn works best with Pandas DataFrames

	Recap: Pandas DataFrame
		-Labelled tabular data structure
		-Labels on rows: index
		-Labels on columns: columns
		-Columns are Pandas Series
		
Using lmplot()

	ex: 
		import pandas as pd
		import matplotlib.pyplot as plt
		import seaborn as sns
		
		timps = sns.load_dataset('tips)
		sns.lmplot(x= 'total_bill',y='tip', data=tips) ###Line to use seaborn to create linear regressions plot
		plt.show()
		
Data has factors
Grouping Factors (on the same plot)

	ex:
		sns.lmplot(x= 'total_bill',y='tip', data=tips, hue = 'sex', palette='Set1') ###Line to use seaborn to create linear regressions plot
		plt.show()
		
		
Using col=..

	ex:
	
		sns.lmplot(x= 'total_bill',y='tip', data=tips, col='sex') ###Line to use seaborn to create linear regressions plot
		plt.show()
		
		
		
Using residplot()

	ex: 
		sns.residplot(x='age',y='fare',data=df,color='indianred')
		plt.show()
		
		
	-Similar arguments as lmplot() but more flexible
		-x, y can be arrays or strings but more flexible
		-data is DataFrame (optional)
		
	-Optional arguments (e.g.color) as in matplotlib
	
		
_____________________________________________________________________________________________________________
		
		
Simple linear regressions
As you have seen, seaborn provides a convenient interface to generate complex and great-looking statistical plots. One of the simplest things you can do using seaborn is to fit and visualize a simple linear regression between two variables using sns.lmplot().

One difference between seaborn and regular matplotlib plotting is that you can pass pandas DataFrames directly to the plot and refer to each column by name. For example, if you were to plot the column 'price' vs the column 'area' from a DataFrame df, you could call sns.lmplot(x='area', y='price', data=df).

In this exercise, you will once again use the DataFrame auto containing the auto-mpg dataset. You will plot a linear regression illustrating the relationship between automobile weight and horse power.

INSTRUCTIONS
100 XP
Import matplotlib.pyplot and seaborn using the standard names plt and sns respectively.
Plot a linear regression between the 'weight' column (on the x-axis) and the 'hp' column (on the y-axis) from the DataFrame auto.
Display the plot as usual with plt.show(). This has been done for you, so hit 'Submit Answer' to view the plot.

# Import plotting modules
import matplotlib.pyplot as plt
import seaborn as sns

# Plot a linear regression between 'weight' and 'hp'
sns.lmplot(x='weight', y='hp', data=auto)

# Display the plot
plt.show()

___________________________________________________________________________________________________________
Plotting residuals of a regression
Often, you don't just want to see the regression itself but also see the residuals to get a better idea how well the regression captured the data. Seaborn provides sns.residplot() for that purpose, visualizing how far datapoints diverge from the regression line.

In this exercise, you will visualize the residuals of a regression between the 'hp' column (horse power) and the 'mpg' column (miles per gallon) of the auto DataFrame used previously.

INSTRUCTIONS
100 XP
Import matplotlib.pyplot and seaborn using the standard names plt and sns respectively.
Generate a green residual plot of the regression between 'hp' (on the x-axis) and 'mpg' (on the y-axis). You will need to specify the additional data and color parameters.
Display the plot as usual using plt.show(). This has been done for you, so hit 'Submit Answer' to view the plot.




  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
